// <auto-generated />
using System;
using DineMetrics.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DineMetrics.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241101152556_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DineMetrics.Core.Models.CustomerMetric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("ReportId");

                    b.ToTable("CustomerMetrics");
                });

            modelBuilder.Entity("DineMetrics.Core.Models.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EateryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EateryId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("DineMetrics.Core.Models.Eatery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("OpeningDay")
                        .HasColumnType("date");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Eateries");
                });

            modelBuilder.Entity("DineMetrics.Core.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("WorkEnd")
                        .HasColumnType("date");

                    b.Property<DateOnly>("WorkStart")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DineMetrics.Core.Models.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AverageTemperature")
                        .HasColumnType("float");

                    b.Property<DateOnly>("ReportDate")
                        .HasColumnType("date");

                    b.Property<int>("TotalCustomers")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("DineMetrics.Core.Models.TemperatureMetric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("ReportId");

                    b.ToTable("TemperatureMetrics");
                });

            modelBuilder.Entity("DineMetrics.Core.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("AppointmentDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("EateryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EateryId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6395e8b6-5845-4de5-a30f-ce497fca4e35"),
                            AppointmentDate = new DateOnly(2022, 11, 28),
                            Email = "admin@gmail.com",
                            PasswordHash = "f9c355b602a10ee3e31c2f2c23acdcba3b299ddcf9607ba0d10ae9d041e8e09b",
                            Role = 0
                        });
                });

            modelBuilder.Entity("DineMetrics.Core.Models.CustomerMetric", b =>
                {
                    b.HasOne("DineMetrics.Core.Models.Device", "Device")
                        .WithMany("CustomerMetrics")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DineMetrics.Core.Models.Report", "Report")
                        .WithMany("CustomerMetrics")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("DineMetrics.Core.Models.Device", b =>
                {
                    b.HasOne("DineMetrics.Core.Models.Eatery", "Eatery")
                        .WithMany("Devices")
                        .HasForeignKey("EateryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Eatery");
                });

            modelBuilder.Entity("DineMetrics.Core.Models.Employee", b =>
                {
                    b.HasOne("DineMetrics.Core.Models.User", "Manager")
                        .WithMany("Employees")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("DineMetrics.Core.Models.TemperatureMetric", b =>
                {
                    b.HasOne("DineMetrics.Core.Models.Device", "Device")
                        .WithMany("TemperatureMetrics")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DineMetrics.Core.Models.Report", "Report")
                        .WithMany("TemperatureMetrics")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("DineMetrics.Core.Models.User", b =>
                {
                    b.HasOne("DineMetrics.Core.Models.Eatery", "Eatery")
                        .WithMany("Managers")
                        .HasForeignKey("EateryId");

                    b.Navigation("Eatery");
                });

            modelBuilder.Entity("DineMetrics.Core.Models.Device", b =>
                {
                    b.Navigation("CustomerMetrics");

                    b.Navigation("TemperatureMetrics");
                });

            modelBuilder.Entity("DineMetrics.Core.Models.Eatery", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("Managers");
                });

            modelBuilder.Entity("DineMetrics.Core.Models.Report", b =>
                {
                    b.Navigation("CustomerMetrics");

                    b.Navigation("TemperatureMetrics");
                });

            modelBuilder.Entity("DineMetrics.Core.Models.User", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
