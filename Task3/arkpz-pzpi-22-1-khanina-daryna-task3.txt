              Міністерство освіти і науки України 
                Харківський національний університет радіоелектроніки






Кафедра ПІ






Звіт з лабораторної роботи №3
З дисципліни «Аналіз та рефакторинг коду»





Виконав:
ст. гр. ПЗПІ-21-1	Ханіна Д.Д

Перевірив:
ст. викл.	Сокорчук І. П.








Харків 2024 р.
ЛАБОРАТОРНА РОБОТА №3

Мета роботи

Розробити бізнес-логіку та функції адміністрування серверної частини програмної системи.

Хід роботи

Розробка бізнес-логіки серверної частини програмної системи.

  Бізнес-логіка системи буде містити:
авторизація та аутентифікація запитів; 
нотифікація користувачів через email про нетипові показники сенсорів IoT;
додавання нового адміна через email; 
адміністрування їдалень; 
створення звітів про показники сенсорів IoT (pdf формат);
створення статистик про показники сенсорів IoT.


        Бізнес-логіка та загальна діяльність серверної частини представлена на рисунку 1.1.


  

Рисунок 1.1 - UML діаграма діяльності для серверної частини

Те як система буде взаємодіяти в цілому, представлено на рисунку 1.2.




Рисунок 1.2 - UML діаграма взаємодії для серверної частини

2. Створити програмну реалізацію бізнес-логіки та функцій адміністрування серверної частини.

Авторизація та аутентифікація запитів

Ця частина системи забезпечує перевірку користувача на відповідність його облікових даних. Користувачі проходять автентифікацію за допомогою облікового запису (логін та пароль), після чого їм видається токен доступу (JWT). Токен використовується для авторизації в наступних запитах до API. 

Технології та інструменти: 
JWT (JSON Web Token): Використовується для управління сесіями та авторизації. 
Fluent Validation: Для перевірки коректності введених даних, таких як пароль або email.


 AuthenticationService:

   public async Task<ServiceResult<UserDto>> Register(string email, string password, bool isAdmin = false)
    {
        if (!await _userService.IsFreeEmail(email))
        {
            return ServiceResult<UserDto>.Failure(ServiceErrors.NotFreeEmail);
        }

        var passwordHash = _passwordHashing.HashPassword(password);

        var user = new User()
        {
            Email = email,
            PasswordHash = passwordHash,
            Role = isAdmin ? UserRole.Admin : UserRole.Manager,
        };
        
        var userDto = new UserDto()
        {
            Email = email
        };

        try
        {
            await _userRepository.CreateAsync(user);

            return ServiceResult<UserDto>.Success(userDto);
        }
        catch 
        {
            return ServiceResult<UserDto>.Failure(ServiceErrors.FailedRegistration);
        }
    }
    
    public async Task<ServiceResult<AuthenticateResponseDto>> Authenticate(string email, string password)
    {
        var user = await _userService.GetUserByEmail(email);

        if (user == null)
        {
            return ServiceResult<AuthenticateResponseDto>.Failure(ServiceErrors.FailedAuthenticateByEmail);
        }

        var verifyPasswordResult = _passwordHashing.VerifyPassword(password, user.PasswordHash);

        if (!verifyPasswordResult)
        {
            return ServiceResult<AuthenticateResponseDto>.Failure(ServiceErrors.FailedAuthenticateByPassword);
        }
        
        var token = _jwtService.GenerateJwtToken(user);

        return ServiceResult<AuthenticateResponseDto>.Success(new AuthenticateResponseDto(user, token));
    }

JwtService: 

public class JwtService : IJwtService
{
    private readonly AppSettings _appSettings;

    public JwtService(IOptions<AppSettings> appSettings)
    {
        _appSettings = appSettings.Value;
    }

    public string GenerateJwtToken(User user)
    {
        var tokenHandler = new JwtSecurityTokenHandler();
        var key = Encoding.ASCII.GetBytes(_appSettings.Secret!);
        
        var tokenDescriptor = new SecurityTokenDescriptor
        {
            Subject = new ClaimsIdentity(new[]
            {
                new Claim("id", user.Id.ToString())
            }),
            Expires = DateTime.UtcNow.AddDays(7),
            SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
        };
        
        var token = tokenHandler.CreateToken(tokenDescriptor);
        
        return tokenHandler.WriteToken(token);
    }

    public Guid? ValidateJwtToken(string? token)
    {
        if (token == null) return null;

        var tokenHandler = new JwtSecurityTokenHandler();
        var key = Encoding.ASCII.GetBytes(_appSettings.Secret!);
        try
        {
            tokenHandler.ValidateToken(token, new TokenValidationParameters
            {
                ValidateIssuerSigningKey = true,
                IssuerSigningKey = new SymmetricSecurityKey(key),
                ValidateIssuer = false,
                ValidateAudience = false,
                ClockSkew = TimeSpan.Zero
            }, out SecurityToken validatedToken);

            var jwtToken = (JwtSecurityToken)validatedToken;

            return Guid.Parse(jwtToken.Claims.First(x => x.Type == "id").Value);
        }
        catch
        {
            return null;
        }
    }
}


Рисунок 2.1 - Приклад JWT 

Нотифікація користувачів через email про нетипові показники сенсорів IoT

Коли сенсори IoT передають показники, що виходять за межі допустимих норм (наприклад, температура перевищує встановлений поріг), система генерує сповіщення. Сповіщення відправляється на email відповідального користувача (менеджера чи адміністратора). 

Технології та інструменти: 
FluentEmail: Використовується для генерації та надсилання email. 
SMTP (через Gmail): Налаштовано SMTP-клієнт для інтеграції з Gmail для надсилання листів. 
IoT-сервіс: Дані про сенсори отримуються через IoT-клієнт, зберігаються в базі даних, а їх аналіз здійснюється в бізнес-логіці.



Рисунок 2.2 - Приклад email з температурою



Рисунок 2.3 - Приклад email з кліентами

EmailService:

public class EmailService : IEmailService   
{
    private readonly MailAddress _fromAddress;
    private readonly string _password;

    public EmailService(IConfiguration configuration)
    {
        _fromAddress = new MailAddress(configuration["Email:Address"]!, configuration["Email:Name"]!);
        _password = configuration["Email:Password"]!;
    }
    
    public async Task<ServiceResult> SendEmailAsync(string email, string subject, string body)
    {
        try
        {
            var toAddress = new MailAddress(email);
        
            var smtp = new SmtpClient
            {
                Host = "smtp.gmail.com",
                Port = 587,
                EnableSsl = true,
                DeliveryMethod = SmtpDeliveryMethod.Network,
                UseDefaultCredentials = false,
                Credentials = new NetworkCredential(_fromAddress.Address, _password)
            };
        
            using var message = new MailMessage(_fromAddress, toAddress);
        
            message.Subject = subject;
            message.Body = body;
            smtp.Send(message);

            return ServiceResult.Success;
        }
        catch (Exception ex)
        {
            return ServiceResult.Failure(new Error(ex.Message));
        }
    }
}

Додавання нового адміна через email

Адміністратор може додати нового користувача з роллю "адмін". Після цього система надсилає лист-запрошення з посиланням на реєстрацію. Лист включає токен для підтвердження операції та форму для створення нового пароля. 

Технології та інструменти: 
PasswordService: Використовується для генерації паролю для активації акаунта. 
FluentEmail: Відповідає за надсилання запрошення на email. ASP.NET.


Рисунок 2.4 - Приклад email з паролем

PasswordService:

public static class PasswordGenerator
{
    private static readonly Random Random = new Random();

    public static string GenerateRandomPassword()
    {
        const int passwordLength = 8;
        const string upperCaseChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        const string lowerCaseChars = "abcdefghijklmnopqrstuvwxyz";
        const string numericChars = "0123456789";
        const string specialChars = "!@#$%^&*()-_=+";

        var passwordBuilder = new StringBuilder();
        passwordBuilder.Append(GetRandomChar(upperCaseChars));

        const string allChars = upperCaseChars + lowerCaseChars + numericChars + specialChars;
        while (passwordBuilder.Length < passwordLength)
        {
            passwordBuilder.Append(GetRandomChar(allChars));
        }

        return new string(passwordBuilder.ToString().OrderBy(_ => Random.Next()).ToArray());
    }

    private static char GetRandomChar(string availableChars)
    {
        return availableChars[Random.Next(availableChars.Length)];
    }
}

Адміністрування їдалень 

Цей функціонал дозволяє адміністраторам виконувати CRUD-операції (створення, читання, оновлення та видалення) для їдалень. Включає налаштування годин роботи, максимальної місткості, температурного порогу та інших параметрів. 

Технології та інструменти: 
ASP.NET Core Web API: Використовується для створення API, що обслуговує запити на адміністрування. 
Entity Framework Core (EF Core): Для роботи з базою даних. 
Сервісний шар: Інкапсулює бізнес-логіку, забезпечуючи валідацію змін та застосування бізнес-правил.

    [HttpPut("{id}/operating-hours")]
    public async Task<IActionResult> UpdateOperatingHours(Guid id, [FromBody] UpdateOperatingHoursDto dto)
    {
        var result = await _eateryService.UpdateOperatingHours(id, dto.From, dto.To);

        if (!result.IsSuccess)
            return BadRequest(result.Error.Message);

        return Ok(result.Value);
    }

    [HttpPut("{id}/maximum-capacity")]
    public async Task<IActionResult> UpdateMaximumCapacity(Guid id, [FromBody] UpdateMaximumCapacityDto dto)
    {
        var result = await _eateryService.UpdateMaximumCapacity(id, dto.Capacity);

        if (!result.IsSuccess)
            return BadRequest(result.Error.Message);

        return Ok(result.Value);
    }

    [HttpPut("{id}/temperature-threshold")]
    public async Task<IActionResult> UpdateTemperatureThreshold(Guid id, [FromBody] UpdateTemperatureThresholdDto dto)
    {
        var result = await _eateryService.UpdateTemperatureThreshold(id, dto.MinTemperature);

        if (!result.IsSuccess)
            return BadRequest(result.Error.Message);

        return Ok(result.Value);
    }

Створення звітів про показники сенсорів IoT (PDF формат)

Система дозволяє адміністраторам завантажувати звіти у PDF-форматі, що включають метрики, зібрані з IoT-сенсорів. Наприклад, звіт може містити середню температуру, кількість клієнтів та інші дані за вказаний період. 

Технології та інструменти: 
iText 7: Бібліотека для генерації PDF-документів. Використовується для форматування таблиць, тексту та графіків у звіті. 
Entity Framework Core: Для отримання даних про метрики з бази даних. 
ASP.NET Core Web API: Для обробки запитів на створення та завантаження звітів.



Рисунок 2.5 - Приклад pdf звіту 


    [HttpPost("download")]
    public async Task<IActionResult> GetReportsByDateRange(ReportDownloadDto model)
    {
        if (model.EndDate < model.StartDate)
        {
            return BadRequest("End date cannot be before start date.");
        }
        
        var reports = await _reportRepository
            .GetByPredicateAsync(r => r.ReportDate >= model.StartDate && r.ReportDate <= model.EndDate);
        
        if (reports.Count == 0)
        {
            return NotFound("No reports found for the given date range.");
        }
        
        var data = reports.Select(r => new List<string>
        {
            r.ReportDate.ToString(),
            Math.Round(r.AverageTemperature, 2).ToString(CultureInfo.InvariantCulture),
            r.TotalCustomers.ToString()
        }).ToList();
        
        var headers = new List<string> { "Date", "Average Temperature", "Total Customers" };
        
        var pdfBytes = PdfGeneratorService.CreatePdf(data, "Reports from " + model.StartDate + " to " + model.EndDate, headers);
        
        return File(pdfBytes, "application/pdf", "Reports_" + model.StartDate + "_to_" + model.EndDate + ".pdf");
    }

PdfGeneratorService:

public static class PdfGeneratorService
{
    public static byte[] CreatePdf(List<List<string>> data, string title, List<string> headers)
    {
        using var memoryStream = new MemoryStream();
        var writer = new PdfWriter(memoryStream);
        using var pdf = new PdfDocument(writer);
        using var document = new Document(pdf);

        document.Add(new Paragraph(title).SetTextAlignment(TextAlignment.CENTER));
        
        var numberOfColumns = headers.Count;
        var table = new Table(numberOfColumns);
        
        foreach (var header in headers)
        {
            table.AddHeaderCell(new Cell().Add(new Paragraph(header)));
        }
        
        foreach (var value in data.SelectMany(row => row))
        {
            table.AddCell(new Cell().Add(new Paragraph(value)));
        }

        document.Add(table);
        document.Close();

        return memoryStream.ToArray();
    }
}

Створення статистик про показники сенсорів IoT 

Система збирає та аналізує дані, зібрані з IoT-сенсорів, щоб створити статистичні звіти, наприклад, тенденції зміни температури, енергоспоживання або кількість клієнтів. Дані агрегуються та групуються за днями, тижнями чи місяцями. 

Технології та інструменти: 
Entity Framework Core: Для роботи з великими наборами даних, отриманих з IoT-сенсорів. 
LINQ: Використовується для групування даних та виконання обчислень, таких як середнє значення або максимальні показники. 
ASP.NET Core Web API: Для відображення результатів у вигляді JSON-запитів або інтеграції з аналітичними дашбордами.

AnalyticsService:

public class AnalyticsService : IAnalyticsService
{
    private readonly IRepository<TemperatureMetric> _metricRepository;

    public AnalyticsService(IRepository<TemperatureMetric> metricRepository)
    {
        _metricRepository = metricRepository;
    }

    public async Task<ServiceResult<DashboardDataDto>> GetDashboardMetrics(DateTime from, DateTime to)
    {
        try
        {
            var metrics = await _metricRepository.GetByPredicateAsync(m => m.Time >= from && m.Time <= to);

            if (metrics.Count == 0)
                return ServiceResult<DashboardDataDto>.NotFound();

            var avgTemp = metrics.Average(m => m.Value);

            var dashboardData = new DashboardDataDto
            {
                AverageTemperature = avgTemp,
                TotalMetrics = metrics.Count
            };

            return ServiceResult<DashboardDataDto>.Success(dashboardData);
        }
        catch (Exception ex)
        {
            return ServiceResult<DashboardDataDto>.Failure(new Error($"An error occurred: {ex.Message}"));
        }
    }

    public async Task<ServiceResult<List<TrendAnalysisDto>>> GenerateTrends(Guid facilityId)
    {
        try
        {
            var metrics = await _metricRepository.GetByPredicateAsync(m => m.Device.Eatery.Id == facilityId);

            if (metrics.Count == 0)
                return ServiceResult<List<TrendAnalysisDto>>.NotFound();

            var trends = metrics
                .GroupBy(m => m.Time.Date)
                .Select(g => new TrendAnalysisDto
                {
                    Date = g.Key,
                    AverageValue = g.Average(m => m.Value)
                }).ToList();

            return ServiceResult<List<TrendAnalysisDto>>.Success(trends);
        }
        catch (Exception ex)
        {
            return ServiceResult<List<TrendAnalysisDto>>.Failure(new Error($"An error occurred: {ex.Message}"));
        }
    }
}






3. Тестування системи

        Записуємо змістовне відео з тестуванням бізнес-логіки та функцій адміністрування серверної частини системи, проставляємо таймкоди та завантажуємо на сервіс YouTube. Посилання на відео: https://www.youtube.com/watch?v=o2wiAdmWhls

Висновки

Під час виконання лабораторної роботи було спроектувано бізнес-логіку та функції адміністрування серверної частини програмної системи.


